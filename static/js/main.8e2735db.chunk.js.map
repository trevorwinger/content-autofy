{"version":3,"sources":["Components/input.js","Components/subCheckbox.js","Components/checkBoxParent.js","Components/radioButtonParent.js","Components/checkBoxForm.js","Components/checkBoxFormParent.js","App.js","serviceWorker.js","index.js"],"names":["Input","headerText","inputVar","setInputVar","style","margin","textAlign","width","value","onChange","event","target","SubCheckbox","kw","selected","setSelected","useState","checked","setChecked","FormControlLabel","control","Checkbox","includes","id","concat","s","filter","x","inputProps","label","CheckboxParent","listOfKeywords","subTitle","selectedList","selectedListStateFunction","justifyContent","float","map","RadioButtonParent","choice","setChoice","RadioGroup","aria-label","name","Radio","typeOfRoofing","roofService","repairServices","otherServices","CheckBoxForm","setKw","mBrand","setMBrand","display","CheckboxFormParent","kwList","setKwList","toString","App","brand","setBrand","location","setLocation","manuBrand","setManuBrand","styleCBFP","className","verticalAlign","styel","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQA2BeA,G,MAzBD,SAAC,GACd,IADeC,EAChB,EADgBA,WAAYC,EAC5B,EAD4BA,SAAUC,EACtC,EADsCA,YAiBlC,OACI,yBAAKC,MAXc,CACnBC,OAAO,OACPC,UAAU,SAUN,4BAAKL,GACL,2BAAOG,MAjBI,CACfG,MAAM,QAgBwBC,MAAON,EAAUO,SARlC,SAACC,GAEdP,EAAYO,EAAMC,OAAOH,a,gBCqBlBI,EAjCK,SAAC,GACpB,IADqBC,EACtB,EADsBA,GAAIC,EAC1B,EAD0BA,SAAUC,EACpC,EADoCA,YACpC,EAEkCC,oBAAS,GAF3C,mBAEWC,EAFX,KAEoBC,EAFpB,KAiBI,OACI,6BACI,kBAACC,EAAA,EAAD,CACAC,QACI,kBAACC,EAAA,EAAD,CACIJ,QAASA,EACTR,SApBK,SAACC,GAIlB,GAFAQ,EAAWR,EAAMC,OAAOM,UAEkB,IAAvCH,EAASQ,SAASZ,EAAMC,OAAOY,IAE9BR,EAAYD,EAASU,OAAOd,EAAMC,OAAOY,UAExC,IAA4B,IAAzBb,EAAMC,OAAOM,QACrB,CACI,IAAIQ,EAAIX,EAASY,QAAO,SAAAC,GAAC,OAAIA,IAAMjB,EAAMC,OAAOY,MAChDR,EAAYU,KAUJG,WAAY,CAAE,aAAc,0BAC5BL,GAAIV,IAEZgB,MAAOhB,MCAJiB,EA7BQ,SAAC,GAAyE,IAAxEC,EAAuE,EAAvEA,eAAgBC,EAAuD,EAAvDA,SAAUC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,0BAgB7D,OACI,yBAAK9B,MAhBQ,CACbG,MAAM,OACN4B,eAAe,SACf7B,UAAU,OACV8B,MAAM,WAaF,wBAAIhC,MAVQ,CAChBgC,MAAM,WASyBJ,GAC3B,yBAAK5B,MAPM,CACfE,UAAU,SAQFyB,EAAeM,KAAK,SAAAxB,GAAE,OACtB,kBAAC,EAAD,CAAaA,GAAIA,EAAIC,SAAUmB,EAAclB,YAAamB,U,gBCI3DI,EAxBW,SAAC,GAC1B,IAD2BC,EAC5B,EAD4BA,OAAQC,EACpC,EADoCA,UAahC,OACI,yBAAKpC,MAXQ,CACb+B,eAAe,SACf7B,UAAU,SAUN,4CACA,kBAACmC,EAAA,EAAD,CAAYC,aAAW,eAAeC,KAAK,eAAenC,MAAO+B,EAAQ9B,SAR5D,SAACC,GAElB8B,EAAU9B,EAAMC,OAAOH,SAOf,kBAACW,EAAA,EAAD,CAAkBX,MAAM,gBAAgBY,QAAS,kBAACwB,EAAA,EAAD,MAAUf,MAAM,kBACjE,kBAACV,EAAA,EAAD,CAAkBX,MAAM,yBAAyBY,QAAS,kBAACwB,EAAA,EAAD,MAAUf,MAAM,8BClBpFgB,EAAgB,CAAC,sBAAuB,qBAAsB,kBAAmB,eAAgB,gBAAiB,eAAgB,gBAAiB,iBACnJC,EAAc,CAAC,mBAAmB,cAAe,gBAAiB,mBAAoB,iBAAkB,kBAAmB,cAC3HC,EAAiB,CAAC,gBAAiB,sBAAsB,sBACzDC,EAAgB,CAAC,mBAAoB,YAAa,sBAAuB,mBAAoB,wBAAyB,oBAAqB,cAsBlIC,EApBM,SAAC,GACrB,IADsBpC,EACvB,EADuBA,GAAIqC,EAC3B,EAD2BA,MAAOC,EAClC,EADkCA,OAAQC,EAC1C,EAD0CA,UAStC,OACI,yBAAKhD,MAR4B,CACjCG,MAAM,OACN8C,QAAQ,OACRlB,eAAe,eACf9B,OAAO,WAKH,kBAAC,EAAD,CAAgB0B,eAAgBc,EAAeb,SAAS,kBAAkBC,aAAcpB,EAAIqB,0BAA2BgB,IACvH,kBAAC,EAAD,CAAgBnB,eAAgBe,EAAad,SAAS,kBAAkBC,aAAcpB,EAAIqB,0BAA2BgB,IACrH,kBAAC,EAAD,CAAgBnB,eAAgBiB,EAAehB,SAAS,mBAAmBC,aAAcpB,EAAIqB,0BAA2BgB,IACxH,kBAAC,EAAD,CAAgBnB,eAAgBgB,EAAgBf,SAAS,kBAAkBC,aAAcpB,EAAIqB,0BAA2BgB,IACxH,kBAAC,EAAD,CAAuBX,OAAQY,EAAQX,UAAWY,MCN/CE,EAhBY,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,UAAWL,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UAMpD,OACI,yBAAKhD,MANc,CACnBE,UAAU,SACV6B,eAAe,WAKX,wCACA,2BAAIoB,EAAOE,YACX,2BAAIN,GACJ,kBAAC,EAAD,CAAetC,GAAI0C,EAAQL,MAAOM,EAAWL,OAAQA,EAAQC,UAAWA,MC2BrEM,MApCf,WAAgB,IAAD,EACO1C,mBAAS,IADhB,mBACNH,EADM,KACFqC,EADE,OAEalC,mBAAS,IAFtB,mBAEN2C,EAFM,KAECC,EAFD,OAGmB5C,mBAAS,IAH5B,mBAGN6C,EAHM,KAGIC,EAHJ,OAIqB9C,mBAAS,IAJ9B,mBAIN+C,EAJM,KAIKC,EAJL,KAcPC,EACN,CACE9B,eAAe,SACf7B,UAAU,UAIZ,OACE,yBAAK4D,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK9D,MAlBY,CACrBiD,QAAS,OACT/C,UAAU,SACV6B,eAAe,SACf5B,MAAM,OACN4D,cAAc,WAcR,kBAAC,EAAD,CAAOlE,WAAY,aAAcC,SAAUyD,EAAOxD,YAAayD,IAC/D,kBAAC,EAAD,CAAO3D,WAAY,iBAAkBC,SAAU2D,EAAU1D,YAAa2D,KAExE,yBAAKM,MAAOH,GACV,kBAAC,EAAD,CAAoB7D,MAAO6D,EAAWV,OAAQ1C,EAAI2C,UAAWN,EAAOC,OAAQY,EAAWX,UAAWY,QCtBxFK,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e2735db.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Input = ({headerText, inputVar, setInputVar}) => \r\n{\r\n\r\n    const inputStyle = {\r\n        width:\"100%\",\r\n    }\r\n\r\n    const containerStyle = {\r\n        margin:\"20px\",\r\n        textAlign:\"left\"\r\n    }\r\n    \r\n    const setInput = (event) => \r\n    {\r\n        setInputVar(event.target.value);\r\n    }\r\n\r\n    return(\r\n        <div style={containerStyle}>\r\n            <h2>{headerText}</h2>\r\n            <input style={inputStyle} value={inputVar} onChange={setInput} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","import React, {useState} from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nconst SubCheckbox = ({kw, selected, setSelected}) => \r\n{\r\n\r\n    const [checked, setChecked] = useState(false);\r\n    const handleChange = (event) => \r\n    {\r\n        setChecked(event.target.checked);\r\n        \r\n        if(selected.includes(event.target.id) === false)\r\n        {\r\n            setSelected(selected.concat(event.target.id));\r\n        }\r\n        else if(event.target.checked === false)\r\n        {\r\n            var s = selected.filter(x => x !== event.target.id);\r\n            setSelected(s);\r\n        }\r\n    }\r\n    return(\r\n        <div>\r\n            <FormControlLabel \r\n            control= {\r\n                <Checkbox \r\n                    checked={checked}\r\n                    onChange={handleChange}\r\n                    inputProps={{ 'aria-label': 'indeterminate checkbox' }} \r\n                    id={kw}/>\r\n            }\r\n            label={kw}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubCheckbox;","import React from 'react';\r\nimport SubCheckbox from './subCheckbox';\r\n\r\nconst CheckboxParent = ({listOfKeywords, subTitle, selectedList, selectedListStateFunction}) => {\r\n    const styleDiv = {\r\n        width:\"100%\",\r\n        justifyContent:\"center\",\r\n        textAlign:\"left\",\r\n        float:\"center\"\r\n    }\r\n\r\n    const subTitleStyle={\r\n        float:\"center\",\r\n    }\r\n\r\n    const subCbStyle = {\r\n        textAlign:\"left\",\r\n    }\r\n    \r\n    return(\r\n        <div style={styleDiv}>\r\n            <h4 style={subTitleStyle}>{subTitle}</h4>\r\n            <div style={subCbStyle}>\r\n            {\r\n                listOfKeywords.map((kw => \r\n                <SubCheckbox kw={kw} selected={selectedList} setSelected={selectedListStateFunction}/>))\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckboxParent;","import React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nconst RadioButtonParent = ({choice, setChoice}) => \r\n{\r\n\r\n    const styleDiv = {\r\n        justifyContent:\"center\",\r\n        textAlign:\"left\",\r\n    }\r\n\r\n    const handleChange = (event) => \r\n    {\r\n        setChoice(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div style={styleDiv}>\r\n            <h4>Manufacturer</h4>\r\n            <RadioGroup aria-label=\"manufacturer\" name=\"manufacturer\" value={choice} onChange={handleChange}>\r\n                <FormControlLabel value=\"Owens Corning\" control={<Radio/>} label=\"Owens Corning\"></FormControlLabel>\r\n                <FormControlLabel value=\"General Aniline & Film\" control={<Radio/>} label=\"General Aniline & Film\"></FormControlLabel>\r\n            </RadioGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RadioButtonParent;","import React from 'react';\r\nimport CheckboxParent from './checkBoxParent';\r\nimport RadioButtonFormParent from './radioButtonParent';\r\n\r\n\r\nconst typeOfRoofing = ['Residential Roofing', 'Commercial Roofing', 'Shingle Roofing', 'Tile Roofing', 'Metal Roofing', 'Flat Roofing', 'Slate Roofing', 'Solar Roofing'];\r\nconst roofService = ['Roof Replacement','Roof Repair', 'Roof Cleaning', 'Roof Maintenance', 'Roof Financing', 'Roof Inspection', 'Solar Roof'];\r\nconst repairServices = ['Gutter Repair', 'Storm Damage Repair','Roof Damage Repair'];\r\nconst otherServices = ['Attic Insulation', 'Roof Maxx', 'Gutter Installation', 'Seamless Gutters', 'Skylight Installation', 'Emergency Roofing', 'Leaky Roof'];\r\n\r\nconst CheckBoxForm = ({kw, setKw, mBrand, setMBrand}) => \r\n{\r\n    const styleContainerCheckBoxParent = {\r\n        width:\"100%\",\r\n        display:\"flex\", \r\n        justifyContent:\"spaceBetween\",\r\n        margin:\"0 auto\",   \r\n    }\r\n    \r\n    return (\r\n        <div style={styleContainerCheckBoxParent}>\r\n            <CheckboxParent listOfKeywords={typeOfRoofing} subTitle='Type of Roofing' selectedList={kw} selectedListStateFunction={setKw} />\r\n            <CheckboxParent listOfKeywords={roofService} subTitle='Roof Service(s)' selectedList={kw} selectedListStateFunction={setKw} />\r\n            <CheckboxParent listOfKeywords={otherServices} subTitle='Other Service(s)' selectedList={kw} selectedListStateFunction={setKw} />\r\n            <CheckboxParent listOfKeywords={repairServices} subTitle='Repair Services' selectedList={kw} selectedListStateFunction={setKw} />\r\n            <RadioButtonFormParent choice={mBrand} setChoice={setMBrand} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheckBoxForm;","import React from 'react';\r\nimport CheckBoxForm from './checkBoxForm';\r\n\r\nconst CheckboxFormParent = ({kwList, setKwList, mBrand, setMBrand}) => {\r\n    const styleContainer = {\r\n        textAlign:\"center\",\r\n        justifyContent:\"center\",\r\n    }\r\n\r\n    return(\r\n        <div style={styleContainer}>\r\n            <h3>Keywords</h3>\r\n            <p>{kwList.toString()}</p>\r\n            <p>{mBrand}</p>\r\n            <CheckBoxForm  kw={kwList} setKw={setKwList} mBrand={mBrand} setMBrand={setMBrand}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckboxFormParent;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Input from './Components/input';\r\nimport CheckboxFormParent from './Components/checkBoxFormParent';\r\n\r\nfunction App() {\r\n  const [kw, setKw] = useState([]);\r\n  const [brand, setBrand] = useState('');\r\n  const [location, setLocation] = useState('');\r\n  const [manuBrand, setManuBrand] = useState('');\r\n\r\n  const styleContainer = {\r\n    display: \"flex\",\r\n    textAlign:\"center\",\r\n    justifyContent:\"center\",\r\n    width:\"100%\",\r\n    verticalAlign:\"middle\",\r\n  }\r\n\r\n  const styleCBFP = \r\n  {\r\n    justifyContent:\"center\",\r\n    textAlign:\"center\",\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div style={styleContainer}>\r\n          <Input headerText={'Brand Name'} inputVar={brand} setInputVar={setBrand}/>\r\n          <Input headerText={'Brand Location'} inputVar={location} setInputVar={setLocation} />\r\n        </div>\r\n        <div styel={styleCBFP}>\r\n          <CheckboxFormParent style={styleCBFP} kwList={kw} setKwList={setKw} mBrand={manuBrand} setMBrand={setManuBrand}/>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}